
fun :handle-session session connected cord = {
  session '[s%@] hello, socketeer; send a line!\n' format! connected/send

  fun! :innerloop = {
    ''
    fun! :getline str = {
       fun= 1 connected/recv; cord.asthread! ? { as c
         c '\r' = ? str getline! : -- just ignore CR bytes, wait for LF
         c '\n' = ? str true :
         str c + getline!
       } : {
         session '[s%s] /recv did not return data\n' print!
         false
       }
    }
    ? as line 
      session line '[s%@] Received: [%@]\n' format! connected/send
      line 'bye' = ? session '[s%@] goodbye, jooby!\n' format! connected/send
                     connected/close
                   : session '[s%@] send next line!\n' format! connected/send       
                     innerloop!;
    : session '[s%@] disconnect/error?\n' print!
  }
  session '[s%@] terminating\n' print!
}

'../../bang/lib/nylon.bang' require! as nylon


fun :run-connect cord = {
  'bangsocket' crequire! as socket
  '127.0.0.1' 4429 socket.create! as s
  s /bindAndListen as listener

  'entering accept-connectin\n' print!

  1
  fun! :accept-connection session = {
    session 'entered accept-connection session=%@\n' print!
    fun= 'listening\n' print! listener /accept 'got one\n' print!
    ; cord.asthread! as connected
    session connected handle-session nylon.cord! as _
    session 1 + accept-connection!
  }
}

fun :timer cord = {
  1 fun! :inner count = {
    count '[%@] timer cord woke up\n' print!
    3.0 cord.sleep!
    count 1 + inner!
  }
}

run-connect nylon.cord! as _
timer nylon.cord! as _

nylon.runloop!
