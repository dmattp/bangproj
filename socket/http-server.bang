-- here's a really great intro to HTTP protocol: http://www.jmarshall.com/easy/http/#http1.1
-- benchmarking servers with apache-benchmark: http://www.cyberciti.biz/tips/howto-performance-benchmarks-a-web-server.html

'127.0.0.1' as server-ip
'192.168.1.72' as server-ip
'0.0.0.0' as server-ip
4429        as server-port

'stringlib' crequire! as string
'c:/m/n2proj/bang/lib/nylon.bang' require! as nylon

fun :xml-writer outfun = {
  fun tag = {
    fun withfun =
      '<' tag + '>\n' + outfun!
      (withfun! # 0 > ? outfun!;)
      '\n</' tag + '>\n' + outfun!
  }
}

fun :send-response request sendit cord = {
  'HTTP/1.1 200 OK\nContent-Type: text/html\n\n' sendit!
  sendit xml-writer! as xml
  xml.html [ fun = 
    xml.body [ fun = 
      xml.div [ fun = 
        xml.p [ fun =  request.id nylon.uptime! 'session=%@ t=%@' format! ]
        xml.p [ fun = 'here is my response' ] 
        xml.p [ fun = request.httpVersion request.path request.first-line 'HTTP/%@ ; PATH=%@ fl=%@' format! ]
        xml.p [ fun = nylon.uptime! request.t_beg - 'request handled in %@s' format! ]
      ]
    ]
  ]
--   '</body></html>\n' sendit!
  -- sendit!  
}

fun :handle-session session-id connected cord = {
--   session-id '[s%@] hello, http requester; connection received!\n' print!

  fun :innerloop the-request = {
--    the-request.path the-request.httpVersion 'LINE, request state for path [%s] HTTP/%s\n' print!

    -- fun = connected/getline; cord.asthread!
    connected/getline
    ? as line
      line string.len! as line-length
--       session line-length line '[s%@] Received: %@ [%@]\n' print!

      '^GET (.+) HTTP/([%d.]+)' line string.match! ? {
            as _version as _path
--            _path _version 'Got request for [%s] HTTP/%s\n' print!
            _version the-request rebind.httpVersion as newreq
            _path newreq rebind.path as newreq2
--            newreq2.path newreq2.httpVersion 'REBIND request for [%s] HTTP/%s\n' print!

            the-request.first-line ? {
              _version '1.1' = ? 'HTTP/1.1 100 Continue\n\n' connected/send;
              false newreq2 rebind.first-line innerloop!
            } : newreq2 innerloop!
      }

     -- last line in the request is an empty line; build/send response when we see that,
     -- and close the connection
      line-length 0 = 
      ? the-request
--         fun msg = msg 'Sending [%@]\n' print! msg connected/send;
         fun msg = msg connected/send;
         cord send-response! connected /close
      : the-request innerloop!;
--    : session-id '[s%@] disconnect/error; malformed request?\n' print!
  }

  fun = {
    fun! = {
      true as first-line
      '/origpath/no.htm' as path
      '7.7' as httpVersion
      nylon.uptime! as t_beg
      session-id as id
      ^bind
    }
    innerloop!
  } cord.asthread!
--   session '[s%@] terminating\n' print!
}



fun :run-connect cord = {
  'bangsocket' crequire! as socket
  server-ip 4429 socket.create! as s
  s /bindAndListen as listener

  1
  fun! :accept-connection session = {
    fun= listener /accept; cord.asthread! as connected
    session connected handle-session nylon.cord! as _
    session 1 + accept-connection!
  }
}

fun :timer cord = {
  1 fun! :inner count = {
    count '[%@] timer cord woke up\n' print!
    3.0 cord.sleep!
    count 1 + inner!
  }
}

run-connect nylon.cord! as _
timer nylon.cord! as _

nylon.runloop!

